const spoonacularService = require('../services/spoonacularService');
const openRouterService = require('../services/openRouterService');

class ChatController {
  // Iniciar conversa com ingredientes
  async sendIngredients(req, res) {
    try {
      const { ingredients, originalIngredients, numberOfSuggestions = 3 } = req.body;

      if (!ingredients || !Array.isArray(ingredients) || ingredients.length === 0) {
        return res.status(400).json({
          error: 'Por favor, forne√ßa uma lista de ingredientes v√°lida'
        });
      }

      console.log('ü•ó Ingredientes recebidos (traduzidos):', ingredients);
      console.log('üáµüáπ Ingredientes originais:', originalIngredients);

      // Guardar ingredientes na sess√£o (usar originais para exibi√ß√£o)
      req.session.userIngredients = originalIngredients || ingredients;
      req.session.translatedIngredients = ingredients;
      req.session.chatState = 'waiting_recipe_choice';

      // Processar ingredientes (j√° v√™m traduzidos do frontend)
      const parsedIngredients = spoonacularService.parseIngredients(ingredients);
      
      console.log('üîß Ingredientes processados para API:', parsedIngredients);
      
      // Procurar receitas
      const recipes = await spoonacularService.findRecipesByIngredients(
        parsedIngredients, 
        numberOfSuggestions
      );

      if (recipes.length === 0) {
        console.log('‚ùå Nenhuma receita encontrada com filtros atuais');
        
        // Tentar busca mais permissiva (sem filtros)
        console.log('üîç Tentando busca mais permissiva...');
        const allRecipes = await spoonacularService.findRecipesByIngredientsPermissive(
          parsedIngredients, 
          numberOfSuggestions * 2
        );
        
        if (allRecipes.length > 0) {
          console.log(`üìã Encontradas ${allRecipes.length} receitas aproximadas`);
          
          // Guardar receitas aproximadas na sess√£o
          req.session.availableRecipes = allRecipes.slice(0, numberOfSuggestions);
          req.session.adaptedRecipe = null;
          
          // Gerar receita adaptada mesmo com receitas aproximadas
          const displayIngredients = originalIngredients || ingredients;
          console.log('ü§ñ Gerando receita adaptada (aproximada) para:', displayIngredients);
          
          const prompt = openRouterService.createAdaptedRecipePrompt(displayIngredients, allRecipes.slice(0, numberOfSuggestions));
          const aiResponse = await openRouterService.generateResponse([
            { role: 'user', content: prompt }
          ]);

          // Guardar a receita adaptada gerada
          req.session.adaptedRecipe = {
            originalIngredients: displayIngredients,
            adaptedContent: aiResponse,
            basedOnRecipes: allRecipes.slice(0, numberOfSuggestions).map(r => ({
              id: r.id,
              title: r.title,
              readyInMinutes: r.readyInMinutes
            })),
            isApproximate: true
          };

          req.session.chatState = 'recipe_adapted';

          return res.json({
            message: aiResponse,
            type: 'adapted_recipe_approximate',
            hasNutrition: false,
            canGetDetails: true
          });
        } else {
          return res.json({
            message: 'N√£o encontrei nenhuma receita na base de dados com esses ingredientes. Tens certeza de que os ingredientes est√£o escritos corretamente? Podes tentar com ingredientes mais comuns como "frango", "arroz", "tomate".',
            type: 'no_recipes_found',
            suggestions: []
          });
        }
      }

      // Guardar receitas e ingredientes na sess√£o
      req.session.availableRecipes = recipes;
      req.session.adaptedRecipe = null; // Limpar receita adaptada anterior

      // Gerar receita adaptada usando IA
      const displayIngredients = originalIngredients || ingredients;
      console.log('ü§ñ Gerando receita adaptada para:', displayIngredients);
      
      const prompt = openRouterService.createAdaptedRecipePrompt(displayIngredients, recipes);
      const aiResponse = await openRouterService.generateResponse([
        { role: 'user', content: prompt }
      ]);

      // Guardar a receita adaptada gerada
      req.session.adaptedRecipe = {
        originalIngredients: displayIngredients,
        adaptedContent: aiResponse,
        basedOnRecipes: recipes.slice(0, 3).map(r => ({
          id: r.id,
          title: r.title,
          readyInMinutes: r.readyInMinutes
        }))
      };

      // Mudar o estado para indicar que a receita foi adaptada
      req.session.chatState = 'recipe_adapted';

      res.json({
        message: aiResponse,
        type: 'adapted_recipe',
        hasNutrition: false, // N√£o temos info nutricional espec√≠fica para receita adaptada
        canGetDetails: true // Podemos oferecer mais detalhes
      });

    } catch (error) {
      console.error('Erro ao processar ingredientes:', error);
      
      // Diferentes tipos de erro
      if (error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND') || error.message.includes('timeout')) {
        return res.status(503).json({
          error: 'Erro de conex√£o com os servi√ßos de receitas. Verifica a tua conex√£o √† internet.',
          type: 'connection_error',
          retryable: true
        });
      } else if (error.response && error.response.status === 401) {
        return res.status(503).json({
          error: 'Erro de autentica√ß√£o com os servi√ßos de receitas. O servidor est√° temporariamente indispon√≠vel.',
          type: 'auth_error',
          retryable: true
        });
      } else if (error.response && error.response.status >= 500) {
        return res.status(503).json({
          error: 'Os servi√ßos de receitas est√£o temporariamente indispon√≠veis. Tenta novamente em alguns segundos.',
          type: 'server_error',
          retryable: true
        });
      } else {
        return res.status(500).json({
          error: 'Erro interno do servidor. Tenta novamente.',
          type: 'internal_error',
          retryable: true
        });
      }
    }
  }

  // Processar escolha de receita
  // Processar pedidos sobre a receita adaptada
  async chooseRecipe(req, res) {
    try {
      const { choice } = req.body;

      if (!choice || typeof choice !== 'string') {
        return res.status(400).json({
          error: 'Por favor, especifica o que queres saber sobre a receita.'
        });
      }

      // Verificar se existe receita adaptada na sess√£o
      if (!req.session.adaptedRecipe) {
        return res.status(400).json({
          error: 'N√£o h√° receita adaptada. Por favor, come√ßa novamente com os ingredientes.'
        });
      }

      const userMessage = choice.toLowerCase();
      
      // Interpretar o que o utilizador quer
      if (userMessage.includes('detalhe') || userMessage.includes('mais') || userMessage.includes('completo')) {
        
        // Gerar mais detalhes sobre a receita adaptada
        const detailPrompt = `√âs um chef portugu√™s √∫til. O utilizador perguntou: "${choice}"

Receita adaptada atual:
${req.session.adaptedRecipe.adaptedContent}

Ingredientes originais do utilizador: ${req.session.adaptedRecipe.originalIngredients.join(', ')}

Fornece mais detalhes pr√°ticos sobre esta receita adaptada:
- Dicas de prepara√ß√£o
- Tempos espec√≠ficos de cozedura
- Como verificar se est√° pronto
- Sugest√µes de apresenta√ß√£o

S√™ pr√°tico e √∫til. M√°ximo 120 palavras, portugu√™s de Portugal.`;

        const aiResponse = await openRouterService.generateResponse([
          { role: 'user', content: detailPrompt }
        ]);

        return res.json({
          message: aiResponse,
          type: 'recipe_details'
        });

      } else if (userMessage.includes('nutri') || userMessage.includes('caloria') || userMessage.includes('valor')) {
        
        // Resposta sobre nutri√ß√£o (estimativa)
        const nutritionPrompt = `√âs um nutricionista portugu√™s. O utilizador perguntou sobre nutri√ß√£o para esta receita adaptada:

${req.session.adaptedRecipe.adaptedContent}

Ingredientes: ${req.session.adaptedRecipe.originalIngredients.join(', ')}

Faz uma estimativa nutricional b√°sica e educativa desta receita adaptada. Explica que √© uma estimativa e varia conforme prepara√ß√£o. Destaca pontos positivos nutricionais dos ingredientes.

M√°ximo 100 palavras, portugu√™s de Portugal.`;

        const aiResponse = await openRouterService.generateResponse([
          { role: 'user', content: nutritionPrompt }
        ]);

        return res.json({
          message: aiResponse,
          type: 'nutrition_estimate'
        });

      } else if (userMessage.includes('substitu') || userMessage.includes('trocar') || userMessage.includes('alternativ')) {
        
        // Sugest√µes de substitui√ß√µes
        const substitutionPrompt = `√âs um chef portugu√™s criativo. O utilizador perguntou: "${choice}"

Receita adaptada:
${req.session.adaptedRecipe.adaptedContent}

Ingredientes dispon√≠veis: ${req.session.adaptedRecipe.originalIngredients.join(', ')}

Sugere substitui√ß√µes ou varia√ß√µes criativas que pode fazer com ingredientes comuns que provavelmente tem em casa. S√™ pr√°tico e realista.

M√°ximo 100 palavras, portugu√™s de Portugal.`;

        const aiResponse = await openRouterService.generateResponse([
          { role: 'user', content: substitutionPrompt }
        ]);

        return res.json({
          message: aiResponse,
          type: 'substitution_suggestions'
        });

      } else {
        
        // Resposta geral sobre a receita
        const generalPrompt = `√âs um chef portugu√™s prest√°vel. O utilizador perguntou: "${choice}"

Sobre esta receita adaptada:
${req.session.adaptedRecipe.adaptedContent}

Responde de forma √∫til e espec√≠fica √† pergunta. Se n√£o tens certeza, s√™ honesto mas oferece sugest√µes pr√°ticas.

M√°ximo 80 palavras, portugu√™s de Portugal.`;

        const aiResponse = await openRouterService.generateResponse([
          { role: 'user', content: generalPrompt }
        ]);

        return res.json({
          message: aiResponse,
          type: 'general_response'
        });
      }

    } catch (error) {
      console.error('Erro ao processar pergunta sobre receita:', error);
      
      // Diferentes tipos de erro
      if (error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND') || error.message.includes('timeout')) {
        return res.status(503).json({
          error: 'Erro de conex√£o com os servi√ßos de IA. Verifica a tua conex√£o √† internet.',
          type: 'connection_error',
          retryable: true
        });
      } else if (error.response && error.response.status === 401) {
        return res.status(503).json({
          error: 'Erro de autentica√ß√£o com os servi√ßos de IA. O servidor est√° temporariamente indispon√≠vel.',
          type: 'auth_error',
          retryable: true
        });
      } else if (error.response && error.response.status >= 500) {
        return res.status(503).json({
          error: 'Os servi√ßos de IA est√£o temporariamente indispon√≠veis. Tenta novamente em alguns segundos.',
          type: 'server_error',
          retryable: true
        });
      } else {
        return res.status(500).json({
          error: 'Erro interno do servidor. Tenta novamente.',
          type: 'internal_error',
          retryable: true
        });
      }
    }
  }

  // Obter instru√ß√µes da receita
  async getInstructions(req, res) {
    try {
      if (!req.session.selectedRecipe) {
        return res.status(400).json({
          error: 'Nenhuma receita selecionada. Por favor, escolhe uma receita primeiro.'
        });
      }

      const recipeId = req.session.selectedRecipe.id;
      const instructions = await spoonacularService.getRecipeInstructions(recipeId);

      if (!instructions || instructions.length === 0) {
        return res.json({
          message: 'Desculpa, n√£o consegui obter as instru√ß√µes detalhadas para esta receita.',
          instructions: []
        });
      }

      // Gerar resposta com instru√ß√µes formatadas
      const instructionsPrompt = openRouterService.createInstructionsPrompt(
        req.session.selectedRecipe, 
        instructions
      );
      const aiResponse = await openRouterService.generateResponse([
        { role: 'user', content: instructionsPrompt }
      ]);

      res.json({
        message: aiResponse,
        instructions: instructions[0]?.steps || []
      });

    } catch (error) {
      console.error('Erro ao obter instru√ß√µes:', error);
      res.status(500).json({
        error: 'Erro ao obter instru√ß√µes da receita. Tenta novamente.'
      });
    }
  }

  // Reiniciar conversa
  async resetChat(req, res) {
    try {
      req.session.destroy((err) => {
        if (err) {
          console.error('Erro ao limpar sess√£o:', err);
        }
      });

      res.json({
        message: 'Conversa reiniciada! Podes come√ßar novamente com os teus ingredientes.',
        reset: true
      });
    } catch (error) {
      console.error('Erro ao reiniciar chat:', error);
      res.status(500).json({
        error: 'Erro ao reiniciar conversa.'
      });
    }
  }

  // Obter estado da sess√£o
  async getSessionState(req, res) {
    try {
      res.json({
        chatState: req.session.chatState || 'initial',
        hasIngredients: !!req.session.userIngredients,
        hasRecipes: !!req.session.availableRecipes,
        hasSelectedRecipe: !!req.session.selectedRecipe
      });
    } catch (error) {
      console.error('Erro ao obter estado da sess√£o:', error);
      res.status(500).json({
        error: 'Erro ao obter estado da sess√£o.'
      });
    }
  }
}

module.exports = new ChatController();
