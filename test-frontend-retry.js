#!/usr/bin/env node

// Script para testar funcionalidades de retry do frontend
const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// Configurar cliente com session
const client = axios.create({
  baseURL: BASE_URL,
  withCredentials: true,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

async function testHealthCheck() {
  console.log('üè• Testando health check...');
  try {
    const response = await client.get('/health');
    console.log('‚úÖ Health check OK:', response.data);
    return true;
  } catch (error) {
    console.log('‚ùå Health check FAILED:', error.message);
    return false;
  }
}

async function testIngredientsWithPortuguese() {
  console.log('\nü•ó Testando ingredientes em portugu√™s...');
  try {
    const response = await client.post('/chat/ingredients', {
      ingredients: ['chicken', 'rice', 'tomatoes'], // Traduzidos
      originalIngredients: ['frango', 'arroz', 'tomates'], // Originais
      numberOfSuggestions: 3
    });
    
    console.log('‚úÖ Ingredientes processados com sucesso!');
    console.log('üìã Receitas encontradas:', response.data.recipes?.length || 0);
    console.log('üí¨ Mensagem:', response.data.message.substring(0, 100) + '...');
    
    if (response.data.recipes && response.data.recipes.length > 0) {
      console.log('üçΩÔ∏è Primeira receita:', response.data.recipes[0].title);
    }
    
    return response.data;
  } catch (error) {
    console.log('‚ùå Erro ao processar ingredientes:', error.response?.data || error.message);
    console.log('üîÑ Erro retryable:', error.response?.data?.retryable);
    console.log('üìù Tipo de erro:', error.response?.data?.type);
    return null;
  }
}

async function testChooseRecipe() {
  console.log('\nüéØ Testando escolha de receita...');
  try {
    const response = await client.post('/chat/choose-recipe', {
      choice: '1'
    });
    
    console.log('‚úÖ Receita escolhida com sucesso!');
    console.log('üìä Tem informa√ß√£o nutricional:', !!response.data.recipe?.nutrition);
    console.log('üí¨ Mensagem:', response.data.message.substring(0, 100) + '...');
    
    return response.data;
  } catch (error) {
    console.log('‚ùå Erro ao escolher receita:', error.response?.data || error.message);
    console.log('üîÑ Erro retryable:', error.response?.data?.retryable);
    console.log('üìù Tipo de erro:', error.response?.data?.type);
    return null;
  }
}

async function testInstructions() {
  console.log('\nüìù Testando instru√ß√µes...');
  try {
    const response = await client.get('/chat/instructions');
    
    console.log('‚úÖ Instru√ß√µes obtidas com sucesso!');
    console.log('üí¨ Mensagem:', response.data.message.substring(0, 100) + '...');
    
    return response.data;
  } catch (error) {
    console.log('‚ùå Erro ao obter instru√ß√µes:', error.response?.data || error.message);
    console.log('üîÑ Erro retryable:', error.response?.data?.retryable);
    console.log('üìù Tipo de erro:', error.response?.data?.type);
    return null;
  }
}

async function testInvalidIngredients() {
  console.log('\n‚ùå Testando ingredientes inv√°lidos...');
  try {
    const response = await client.post('/chat/ingredients', {
      ingredients: ['xyz123', 'abcdef', 'nonexistent'],
      originalIngredients: ['xyz123', 'abcdef', 'inexistente'],
      numberOfSuggestions: 3
    });
    
    console.log('‚úÖ Resposta para ingredientes inv√°lidos:', response.data.type);
    console.log('üí¨ Mensagem:', response.data.message.substring(0, 100) + '...');
    console.log('üìã Receitas encontradas:', response.data.recipes?.length || 0);
    
    return response.data;
  } catch (error) {
    console.log('‚ùå Erro com ingredientes inv√°lidos:', error.response?.data || error.message);
    return null;
  }
}

async function runAllTests() {
  console.log('üß™ INICIANDO TESTES DE RETRY E FUNCIONALIDADES\n');
  
  // Test 1: Health Check
  const healthOK = await testHealthCheck();
  if (!healthOK) {
    console.log('‚ùå Servidor n√£o est√° dispon√≠vel. Abortando testes.');
    return;
  }
  
  // Test 2: Ingredientes v√°lidos em portugu√™s
  const ingredientsResult = await testIngredientsWithPortuguese();
  
  if (ingredientsResult && ingredientsResult.recipes?.length > 0) {
    // Test 3: Escolher receita
    const choiceResult = await testChooseRecipe();
    
    if (choiceResult) {
      // Test 4: Obter instru√ß√µes
      await testInstructions();
    }
  }
  
  // Test 5: Ingredientes inv√°lidos
  await testInvalidIngredients();
  
  console.log('\n‚úÖ TESTES CONCLU√çDOS!');
}

// Executar testes
runAllTests().catch(console.error);
